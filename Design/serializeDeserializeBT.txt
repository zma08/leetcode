/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private static final String dl=",";
    private static final String no = "x";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null)return no+dl;
        String left = serialize(root.left);
        String right = serialize(root.right);
        
        return root.val+dl+ left + right;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<String>q = new LinkedList<>();
        String[]arr = data.split(dl);
        for(String a:arr){
            q.add(a);
        }
        return helper(q);
    }
    
    public TreeNode helper(Queue<String>q){
        String current = q.poll();
        if(current.equals(no)){
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(current));
        root.left = helper(q);
        root.right = helper(q);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));