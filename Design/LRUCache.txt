class LRUCache {
//by utilize doubly linked list, we got insert, delete in constant time, in order to have access in 
    //constant time I need hashmap, maintain both structure in sync so that 
    
    public class DNode{
        DNode prev;
        DNode next;
        int key;
        int val;
       
    }
    DNode head;
    DNode tail;
    int cap;
    HashMap<Integer, DNode>map;
    public LRUCache(int capacity) {
        cap = capacity;
        head = new DNode();
        tail = new DNode();
        //******* I need to initialize the structure before any other CRUD action
        head.next = tail;
        tail.prev = head;
        map = new HashMap<>();
    }
    
    public int get(int key) {
        DNode node = map.get(key);
        if(node==null)return -1;
        
        remove(node);
        insertFront(node);
        
        return node.val;
    }
    
    public void put(int key, int value) {
        DNode node = map.get(key);
        if(node==null){
            node = new DNode();
            node.key = key;
            node.val = value;
            map.put(key,node);
            
            insertFront(node);
        }else
        {
            //in case the value is not same
            node.val = value;
            map.put(key,node);
            
            remove(node);
            insertFront(node);
        }
        
        if(map.size()>cap){
            DNode tail = removeTail();
            map.remove(tail.key);
        }
        
    }
    public void remove(DNode node){
        DNode pre = node.prev;
        DNode nex = node.next;
        
        pre.next = nex;
        nex.prev = pre;
    }
    
    public void insertFront(DNode node){
        DNode nex = head.next;
        
        node.next = nex;
        nex.prev = node;
        
        head.next = node;
        node.prev = head;
        
    }
    public DNode removeTail(){
        DNode node = tail.prev;
        
        tail.prev = node.prev;
        node.prev.next = tail;
        return node;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */