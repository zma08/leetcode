/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>>result_list = new ArrayList<>();
        if(root ==null)return result_list;
        
        Stack<TreeNode>stack1 = new Stack<>();
        Stack<TreeNode>stack2 = new Stack<>();
        
        stack1.push(root);
        while(!stack1.isEmpty() || !stack2.isEmpty()){
            List<Integer>list = new ArrayList<>();
            while(stack1.size()>0){
                TreeNode current = stack1.pop();
                list.add(current.val);
                if(current.left!=null)stack2.push(current.left);
                if(current.right!=null)stack2.push(current.right);
            }
            result_list.add(list);
            list = new ArrayList<>();
            while(!stack2.isEmpty()){
                TreeNode current = stack2.pop();
                list.add(current.val);
                if(current.right!=null)stack1.push(current.right);
                if(current.left!=null)stack1.push(current.left);
            }
            if(!list.isEmpty())result_list.add(list);//make sure list is not empty
        }
        return result_list;
    }
}