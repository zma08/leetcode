Median of Two Sorted Arrays
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //this is a sliding solution, the smaller size array need to be the target, so it could 
        //slide thru the whole array and reach the boundary value
        if(nums1.length>nums2.length)
            return findMedianSortedArrays(nums2,nums1);
        
        //divide the 2 array into 2 parts, the left part and right part 
        //if even number they have the same size
        //if odd left part get the bigger size so we return the max of the left part
        //so in order to fullfill the even and odd of totall elements in array, place one extra in the total
        int size = (nums1.length+nums2.length+1)/2;
        //place 2 pointers at the smaller size array
        //the last pointer need to be the last index +1, so to get the boundary value
        int l = 0, r = nums1.length;
        
        //while sliding thru the smaller size array
        
        while(l<=r){
            int m1 = (l+r)/2;
            int m2 = size-m1;
            //consider the boundary cases
            //get the left and right part 
            //m1 is the index of right part, m1-1 is the left part so the left boundary is 0,
            //right boundeay is arry.length  
            int l1 = m1 == 0?Integer.MIN_VALUE:nums1[m1-1];
            int r1 = m1 == nums1.length?Integer.MAX_VALUE:nums1[m1];
            
            int l2 = m2 == 0?Integer.MIN_VALUE:nums2[m2-1];
            int r2 = m2 ==nums2.length?Integer.MAX_VALUE:nums2[m2];
            
            //cases 
            if(l1<=r2 && l2<=r1){
                int len1 = nums1.length;
                int len2 = nums2.length;
                if((len1+len2)%2==0){
                    return (Math.max(l1,l2)+(double)Math.min(r1,r2))/2;
                }else
                    return Math.max(l1,l2);
            }
            else if(l1>r2){
                r = m1-1;
            }else
                l = m1+1;
        }
        return -1;
    }
}